{"version":3,"file":"ng-google-sheets-db.js","sources":["../../../projects/ng-google-sheets-db/src/lib/google-sheets-db.service.ts","../../../projects/ng-google-sheets-db/src/public-api.ts","../../../projects/ng-google-sheets-db/src/ng-google-sheets-db.ts"],"names":[],"mappings":"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","sourcesContent":["import { Observable, throwError } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\n\nimport { InjectionToken, Injectable, Inject } from '@angular/core';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\n\nexport interface GoogleSpreadsheetsResponse {\n  values: string[][];\n}\n\nexport const API_KEY = new InjectionToken<string>('Google Sheets API key');\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class GoogleSheetsDbService {\n  defaultActiveValues: any[] = ['true', '1', 'yes'];\n\n  constructor(\n    private http: HttpClient,\n    @Inject(API_KEY) public apiKey: string\n  ) {}\n\n  public get<T>(\n    spreadsheetId: string,\n    worksheetName: string,\n    attributesMapping: object | string[]\n  ): Observable<T[]> {\n    return this.getRows(spreadsheetId, worksheetName).pipe(\n      map((rows: string[][]) =>\n        this.rowsToEntries(rows).map(\n          (entry: object) =>\n            this.getObjectFromEntry(entry, attributesMapping) as T\n        )\n      )\n    );\n  }\n\n  public getActive<T>(\n    spreadsheetId: string,\n    worksheetName: string,\n    attributesMapping: object | string[],\n    isActiveColumnName: string = 'is_active',\n    activeValues: string[] | string = null\n  ): Observable<T[]> {\n    if (activeValues === null) {\n      activeValues = this.defaultActiveValues;\n    } else if (!Array.isArray(activeValues)) {\n      activeValues = [activeValues];\n    }\n    return this.getRows(spreadsheetId, worksheetName).pipe(\n      map((rows: string[][]) =>\n        this.rowsToEntries(rows)\n          .filter((obj: object) =>\n            activeValues.includes(obj[isActiveColumnName].toLowerCase())\n          )\n          .map(\n            (entry: object) =>\n              this.getObjectFromEntry(entry, attributesMapping) as T\n          )\n      )\n    );\n  }\n\n  private getSpreadsheetUrl(\n    spreadsheetId: string,\n    worksheetName: string\n  ): string {\n    return (\n      'https://sheets.googleapis.com/v4/spreadsheets/' +\n      spreadsheetId +\n      '/values/' +\n      encodeURI(worksheetName) +\n      '?key=' +\n      this.apiKey\n    );\n  }\n\n  private getRows(\n    spreadsheetId: string,\n    worksheetName: string\n  ): Observable<string[][]> {\n    const spreadsheetUrl = this.getSpreadsheetUrl(spreadsheetId, worksheetName);\n\n    return this.http.get<GoogleSpreadsheetsResponse>(spreadsheetUrl).pipe(\n      map((jsonRes) => jsonRes.values),\n      catchError(this.handleError)\n    );\n  }\n\n  public rowsToEntries(rows: string[][]): object[] {\n    const columns: Array<string> = rows[0].map(this.cleanColumnName);\n    return rows.slice(1).map((row: Array<string>) =>\n      columns.reduce((entry: object, columnName: string, idx: number) => {\n        entry[columnName] = row.length > idx ? row[idx] : '';\n        return entry;\n      }, {})\n    );\n  }\n\n  public cleanColumnName(columnName: string): string {\n    return columnName.trim();\n  }\n\n  private arrayToObject(array: string[]): object {\n    return array.reduce((acc, cur) => {\n      acc[cur] = cur;\n      return acc;\n    }, {});\n  }\n\n  private getObjectFromEntry(\n    entry: object,\n    attributesMapping: object | string[]\n  ): unknown {\n    if (Array.isArray(attributesMapping)) {\n      attributesMapping = this.arrayToObject(attributesMapping);\n    }\n\n    return this.getObjectFromEntryObject(entry, attributesMapping);\n  }\n\n  private getObjectFromEntryObject(\n    entry: object,\n    attributesMapping: object,\n    columnNamePrefix: string = ''\n  ): object {\n    const obj: object = {};\n    for (const attr in Object(attributesMapping)) {\n      if (\n        attributesMapping.hasOwnProperty(attr) &&\n        !['_prefix', '_listField'].includes(attr)\n      ) {\n        if (typeof attributesMapping[attr] === 'string') {\n          obj[attr] = this.getValueFromEntry(\n            entry,\n            columnNamePrefix + attributesMapping[attr]\n          );\n        } else if (typeof attributesMapping[attr] === 'object') {\n          let columnName = '';\n          if (attributesMapping[attr].hasOwnProperty('_prefix')) {\n            columnName = attributesMapping[attr]._prefix;\n          }\n\n          if (attributesMapping[attr]._listField) {\n            obj[attr] = this.getListFromEntry(\n              entry,\n              columnNamePrefix + columnName\n            );\n          } else {\n            obj[attr] = this.getObjectFromEntryObject(\n              entry,\n              attributesMapping[attr],\n              columnNamePrefix + columnName\n            );\n          }\n        } else {\n          console.log(`Unknown type for ${attr}`);\n        }\n      }\n    }\n\n    return obj;\n  }\n\n  private getValueFromEntry(entry: object, attribute: string): string {\n    attribute = this.cleanColumnName(attribute);\n    if (entry.hasOwnProperty(attribute)) {\n      return entry[attribute];\n    } else {\n      return null;\n    }\n  }\n\n  private getListFromEntry(entry: object, attribute: string): string[] {\n    const list: string[] = [];\n\n    let i = 1;\n    let curElement: string = this.getValueFromEntry(entry, `${attribute}${i}`);\n    while (curElement) {\n      list.push(curElement);\n      i++;\n      curElement = this.getValueFromEntry(entry, `${attribute}${i}`);\n    }\n\n    return list;\n  }\n\n  private handleError(error: HttpErrorResponse): Observable<never> {\n    if (error.error instanceof ErrorEvent) {\n      console.error('An error occurred:', error.error.message);\n    } else {\n      console.error(\n        `Backend returned code ${error.status}, body was: ${error.error}`\n      );\n    }\n    return throwError('Something bad happened; please try again later.');\n  }\n}\n","/*\n * Public API Surface of ng-google-sheets-db\n */\n\nexport { GoogleSheetsDbService, API_KEY } from './lib/google-sheets-db.service';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}