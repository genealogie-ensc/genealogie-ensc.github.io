{"version":3,"sources":["../../../projects/ng-google-sheets-db/src/lib/google-sheets-db.service.ts"],"names":["API_KEY","InjectionToken","GoogleSheetsDbService","http","apiKey","this","defaultActiveValues","prototype","get","spreadsheetId","worksheetName","attributesMapping","_this","getRows","pipe","map","rows","rowsToEntries","entry","getObjectFromEntry","getActive","isActiveColumnName","activeValues","Array","isArray","filter","obj","includes","toLowerCase","getSpreadsheetUrl","encodeURI","spreadsheetUrl","jsonRes","values","catchError","handleError","columns","cleanColumnName","slice","row","reduce","columnName","idx","length","trim","arrayToObject","array","acc","cur","getObjectFromEntryObject","columnNamePrefix","attr","Object","hasOwnProperty","getValueFromEntry","_prefix","_listField","getListFromEntry","console","log","attribute","list","i","curElement","push","error","ErrorEvent","message","status","throwError","Injectable","args","providedIn","HttpClient","Inject"],"mappings":"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","sourcesContent":["import { Observable, throwError } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\n\nimport { InjectionToken, Injectable, Inject } from '@angular/core';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\n\nexport interface GoogleSpreadsheetsResponse {\n  values: string[][];\n}\n\nexport const API_KEY = new InjectionToken<string>('Google Sheets API key');\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class GoogleSheetsDbService {\n  defaultActiveValues: any[] = ['true', '1', 'yes'];\n\n  constructor(\n    private http: HttpClient,\n    @Inject(API_KEY) public apiKey: string\n  ) {}\n\n  public get<T>(\n    spreadsheetId: string,\n    worksheetName: string,\n    attributesMapping: object | string[]\n  ): Observable<T[]> {\n    return this.getRows(spreadsheetId, worksheetName).pipe(\n      map((rows: string[][]) =>\n        this.rowsToEntries(rows).map(\n          (entry: object) =>\n            this.getObjectFromEntry(entry, attributesMapping) as T\n        )\n      )\n    );\n  }\n\n  public getActive<T>(\n    spreadsheetId: string,\n    worksheetName: string,\n    attributesMapping: object | string[],\n    isActiveColumnName: string = 'is_active',\n    activeValues: string[] | string = null\n  ): Observable<T[]> {\n    if (activeValues === null) {\n      activeValues = this.defaultActiveValues;\n    } else if (!Array.isArray(activeValues)) {\n      activeValues = [activeValues];\n    }\n    return this.getRows(spreadsheetId, worksheetName).pipe(\n      map((rows: string[][]) =>\n        this.rowsToEntries(rows)\n          .filter((obj: object) =>\n            activeValues.includes(obj[isActiveColumnName].toLowerCase())\n          )\n          .map(\n            (entry: object) =>\n              this.getObjectFromEntry(entry, attributesMapping) as T\n          )\n      )\n    );\n  }\n\n  private getSpreadsheetUrl(\n    spreadsheetId: string,\n    worksheetName: string\n  ): string {\n    return (\n      'https://sheets.googleapis.com/v4/spreadsheets/' +\n      spreadsheetId +\n      '/values/' +\n      encodeURI(worksheetName) +\n      '?key=' +\n      this.apiKey\n    );\n  }\n\n  private getRows(\n    spreadsheetId: string,\n    worksheetName: string\n  ): Observable<string[][]> {\n    const spreadsheetUrl = this.getSpreadsheetUrl(spreadsheetId, worksheetName);\n\n    return this.http.get<GoogleSpreadsheetsResponse>(spreadsheetUrl).pipe(\n      map((jsonRes) => jsonRes.values),\n      catchError(this.handleError)\n    );\n  }\n\n  public rowsToEntries(rows: string[][]): object[] {\n    const columns: Array<string> = rows[0].map(this.cleanColumnName);\n    return rows.slice(1).map((row: Array<string>) =>\n      columns.reduce((entry: object, columnName: string, idx: number) => {\n        entry[columnName] = row.length > idx ? row[idx] : '';\n        return entry;\n      }, {})\n    );\n  }\n\n  public cleanColumnName(columnName: string): string {\n    return columnName.trim();\n  }\n\n  private arrayToObject(array: string[]): object {\n    return array.reduce((acc, cur) => {\n      acc[cur] = cur;\n      return acc;\n    }, {});\n  }\n\n  private getObjectFromEntry(\n    entry: object,\n    attributesMapping: object | string[]\n  ): unknown {\n    if (Array.isArray(attributesMapping)) {\n      attributesMapping = this.arrayToObject(attributesMapping);\n    }\n\n    return this.getObjectFromEntryObject(entry, attributesMapping);\n  }\n\n  private getObjectFromEntryObject(\n    entry: object,\n    attributesMapping: object,\n    columnNamePrefix: string = ''\n  ): object {\n    const obj: object = {};\n    for (const attr in Object(attributesMapping)) {\n      if (\n        attributesMapping.hasOwnProperty(attr) &&\n        !['_prefix', '_listField'].includes(attr)\n      ) {\n        if (typeof attributesMapping[attr] === 'string') {\n          obj[attr] = this.getValueFromEntry(\n            entry,\n            columnNamePrefix + attributesMapping[attr]\n          );\n        } else if (typeof attributesMapping[attr] === 'object') {\n          let columnName = '';\n          if (attributesMapping[attr].hasOwnProperty('_prefix')) {\n            columnName = attributesMapping[attr]._prefix;\n          }\n\n          if (attributesMapping[attr]._listField) {\n            obj[attr] = this.getListFromEntry(\n              entry,\n              columnNamePrefix + columnName\n            );\n          } else {\n            obj[attr] = this.getObjectFromEntryObject(\n              entry,\n              attributesMapping[attr],\n              columnNamePrefix + columnName\n            );\n          }\n        } else {\n          console.log(`Unknown type for ${attr}`);\n        }\n      }\n    }\n\n    return obj;\n  }\n\n  private getValueFromEntry(entry: object, attribute: string): string {\n    attribute = this.cleanColumnName(attribute);\n    if (entry.hasOwnProperty(attribute)) {\n      return entry[attribute];\n    } else {\n      return null;\n    }\n  }\n\n  private getListFromEntry(entry: object, attribute: string): string[] {\n    const list: string[] = [];\n\n    let i = 1;\n    let curElement: string = this.getValueFromEntry(entry, `${attribute}${i}`);\n    while (curElement) {\n      list.push(curElement);\n      i++;\n      curElement = this.getValueFromEntry(entry, `${attribute}${i}`);\n    }\n\n    return list;\n  }\n\n  private handleError(error: HttpErrorResponse): Observable<never> {\n    if (error.error instanceof ErrorEvent) {\n      console.error('An error occurred:', error.error.message);\n    } else {\n      console.error(\n        `Backend returned code ${error.status}, body was: ${error.error}`\n      );\n    }\n    return throwError('Something bad happened; please try again later.');\n  }\n}\n"]}