(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('rxjs'), require('rxjs/operators'), require('@angular/core'), require('@angular/common/http')) :
    typeof define === 'function' && define.amd ? define('ng-google-sheets-db', ['exports', 'rxjs', 'rxjs/operators', '@angular/core', '@angular/common/http'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global['ng-google-sheets-db'] = {}, global.rxjs, global.rxjs.operators, global.ng.core, global.ng.common.http));
}(this, (function (exports, rxjs, operators, i0, i1) { 'use strict';

    var API_KEY = new i0.InjectionToken('Google Sheets API key');
    var GoogleSheetsDbService = /** @class */ (function () {
        function GoogleSheetsDbService(http, apiKey) {
            this.http = http;
            this.apiKey = apiKey;
            this.defaultActiveValues = ['true', '1', 'yes'];
        }
        GoogleSheetsDbService.prototype.get = function (spreadsheetId, worksheetName, attributesMapping) {
            var _this = this;
            return this.getRows(spreadsheetId, worksheetName).pipe(operators.map(function (rows) { return _this.rowsToEntries(rows).map(function (entry) { return _this.getObjectFromEntry(entry, attributesMapping); }); }));
        };
        GoogleSheetsDbService.prototype.getActive = function (spreadsheetId, worksheetName, attributesMapping, isActiveColumnName, activeValues) {
            var _this = this;
            if (isActiveColumnName === void 0) { isActiveColumnName = 'is_active'; }
            if (activeValues === void 0) { activeValues = null; }
            if (activeValues === null) {
                activeValues = this.defaultActiveValues;
            }
            else if (!Array.isArray(activeValues)) {
                activeValues = [activeValues];
            }
            return this.getRows(spreadsheetId, worksheetName).pipe(operators.map(function (rows) { return _this.rowsToEntries(rows)
                .filter(function (obj) { return activeValues.includes(obj[isActiveColumnName].toLowerCase()); })
                .map(function (entry) { return _this.getObjectFromEntry(entry, attributesMapping); }); }));
        };
        GoogleSheetsDbService.prototype.getSpreadsheetUrl = function (spreadsheetId, worksheetName) {
            return ('https://sheets.googleapis.com/v4/spreadsheets/' +
                spreadsheetId +
                '/values/' +
                encodeURI(worksheetName) +
                '?key=' +
                this.apiKey);
        };
        GoogleSheetsDbService.prototype.getRows = function (spreadsheetId, worksheetName) {
            var spreadsheetUrl = this.getSpreadsheetUrl(spreadsheetId, worksheetName);
            return this.http.get(spreadsheetUrl).pipe(operators.map(function (jsonRes) { return jsonRes.values; }), operators.catchError(this.handleError));
        };
        GoogleSheetsDbService.prototype.rowsToEntries = function (rows) {
            var columns = rows[0].map(this.cleanColumnName);
            return rows.slice(1).map(function (row) { return columns.reduce(function (entry, columnName, idx) {
                entry[columnName] = row.length > idx ? row[idx] : '';
                return entry;
            }, {}); });
        };
        GoogleSheetsDbService.prototype.cleanColumnName = function (columnName) {
            return columnName.trim();
        };
        GoogleSheetsDbService.prototype.arrayToObject = function (array) {
            return array.reduce(function (acc, cur) {
                acc[cur] = cur;
                return acc;
            }, {});
        };
        GoogleSheetsDbService.prototype.getObjectFromEntry = function (entry, attributesMapping) {
            if (Array.isArray(attributesMapping)) {
                attributesMapping = this.arrayToObject(attributesMapping);
            }
            return this.getObjectFromEntryObject(entry, attributesMapping);
        };
        GoogleSheetsDbService.prototype.getObjectFromEntryObject = function (entry, attributesMapping, columnNamePrefix) {
            if (columnNamePrefix === void 0) { columnNamePrefix = ''; }
            var obj = {};
            for (var attr in Object(attributesMapping)) {
                if (attributesMapping.hasOwnProperty(attr) &&
                    !['_prefix', '_listField'].includes(attr)) {
                    if (typeof attributesMapping[attr] === 'string') {
                        obj[attr] = this.getValueFromEntry(entry, columnNamePrefix + attributesMapping[attr]);
                    }
                    else if (typeof attributesMapping[attr] === 'object') {
                        var columnName = '';
                        if (attributesMapping[attr].hasOwnProperty('_prefix')) {
                            columnName = attributesMapping[attr]._prefix;
                        }
                        if (attributesMapping[attr]._listField) {
                            obj[attr] = this.getListFromEntry(entry, columnNamePrefix + columnName);
                        }
                        else {
                            obj[attr] = this.getObjectFromEntryObject(entry, attributesMapping[attr], columnNamePrefix + columnName);
                        }
                    }
                    else {
                        console.log("Unknown type for " + attr);
                    }
                }
            }
            return obj;
        };
        GoogleSheetsDbService.prototype.getValueFromEntry = function (entry, attribute) {
            attribute = this.cleanColumnName(attribute);
            if (entry.hasOwnProperty(attribute)) {
                return entry[attribute];
            }
            else {
                return null;
            }
        };
        GoogleSheetsDbService.prototype.getListFromEntry = function (entry, attribute) {
            var list = [];
            var i = 1;
            var curElement = this.getValueFromEntry(entry, "" + attribute + i);
            while (curElement) {
                list.push(curElement);
                i++;
                curElement = this.getValueFromEntry(entry, "" + attribute + i);
            }
            return list;
        };
        GoogleSheetsDbService.prototype.handleError = function (error) {
            if (error.error instanceof ErrorEvent) {
                console.error('An error occurred:', error.error.message);
            }
            else {
                console.error("Backend returned code " + error.status + ", body was: " + error.error);
            }
            return rxjs.throwError('Something bad happened; please try again later.');
        };
        return GoogleSheetsDbService;
    }());
    GoogleSheetsDbService.ɵprov = i0.ɵɵdefineInjectable({ factory: function GoogleSheetsDbService_Factory() { return new GoogleSheetsDbService(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(API_KEY)); }, token: GoogleSheetsDbService, providedIn: "root" });
    GoogleSheetsDbService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    GoogleSheetsDbService.ctorParameters = function () { return [
        { type: i1.HttpClient },
        { type: String, decorators: [{ type: i0.Inject, args: [API_KEY,] }] }
    ]; };

    /*
     * Public API Surface of ng-google-sheets-db
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.API_KEY = API_KEY;
    exports.GoogleSheetsDbService = GoogleSheetsDbService;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ng-google-sheets-db.umd.js.map
