import { throwError } from 'rxjs';
import { map, catchError } from 'rxjs/operators';
import { InjectionToken, Injectable, Inject } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
export const API_KEY = new InjectionToken('Google Sheets API key');
export class GoogleSheetsDbService {
    constructor(http, apiKey) {
        this.http = http;
        this.apiKey = apiKey;
        this.defaultActiveValues = ['true', '1', 'yes'];
    }
    get(spreadsheetId, worksheetName, attributesMapping) {
        return this.getRows(spreadsheetId, worksheetName).pipe(map((rows) => this.rowsToEntries(rows).map((entry) => this.getObjectFromEntry(entry, attributesMapping))));
    }
    getActive(spreadsheetId, worksheetName, attributesMapping, isActiveColumnName = 'is_active', activeValues = null) {
        if (activeValues === null) {
            activeValues = this.defaultActiveValues;
        }
        else if (!Array.isArray(activeValues)) {
            activeValues = [activeValues];
        }
        return this.getRows(spreadsheetId, worksheetName).pipe(map((rows) => this.rowsToEntries(rows)
            .filter((obj) => activeValues.includes(obj[isActiveColumnName].toLowerCase()))
            .map((entry) => this.getObjectFromEntry(entry, attributesMapping))));
    }
    getSpreadsheetUrl(spreadsheetId, worksheetName) {
        return ('https://sheets.googleapis.com/v4/spreadsheets/' +
            spreadsheetId +
            '/values/' +
            encodeURI(worksheetName) +
            '?key=' +
            this.apiKey);
    }
    getRows(spreadsheetId, worksheetName) {
        const spreadsheetUrl = this.getSpreadsheetUrl(spreadsheetId, worksheetName);
        return this.http.get(spreadsheetUrl).pipe(map((jsonRes) => jsonRes.values), catchError(this.handleError));
    }
    rowsToEntries(rows) {
        const columns = rows[0].map(this.cleanColumnName);
        return rows.slice(1).map((row) => columns.reduce((entry, columnName, idx) => {
            entry[columnName] = row.length > idx ? row[idx] : '';
            return entry;
        }, {}));
    }
    cleanColumnName(columnName) {
        return columnName.trim();
    }
    arrayToObject(array) {
        return array.reduce((acc, cur) => {
            acc[cur] = cur;
            return acc;
        }, {});
    }
    getObjectFromEntry(entry, attributesMapping) {
        if (Array.isArray(attributesMapping)) {
            attributesMapping = this.arrayToObject(attributesMapping);
        }
        return this.getObjectFromEntryObject(entry, attributesMapping);
    }
    getObjectFromEntryObject(entry, attributesMapping, columnNamePrefix = '') {
        const obj = {};
        for (const attr in Object(attributesMapping)) {
            if (attributesMapping.hasOwnProperty(attr) &&
                !['_prefix', '_listField'].includes(attr)) {
                if (typeof attributesMapping[attr] === 'string') {
                    obj[attr] = this.getValueFromEntry(entry, columnNamePrefix + attributesMapping[attr]);
                }
                else if (typeof attributesMapping[attr] === 'object') {
                    let columnName = '';
                    if (attributesMapping[attr].hasOwnProperty('_prefix')) {
                        columnName = attributesMapping[attr]._prefix;
                    }
                    if (attributesMapping[attr]._listField) {
                        obj[attr] = this.getListFromEntry(entry, columnNamePrefix + columnName);
                    }
                    else {
                        obj[attr] = this.getObjectFromEntryObject(entry, attributesMapping[attr], columnNamePrefix + columnName);
                    }
                }
                else {
                    console.log(`Unknown type for ${attr}`);
                }
            }
        }
        return obj;
    }
    getValueFromEntry(entry, attribute) {
        attribute = this.cleanColumnName(attribute);
        if (entry.hasOwnProperty(attribute)) {
            return entry[attribute];
        }
        else {
            return null;
        }
    }
    getListFromEntry(entry, attribute) {
        const list = [];
        let i = 1;
        let curElement = this.getValueFromEntry(entry, `${attribute}${i}`);
        while (curElement) {
            list.push(curElement);
            i++;
            curElement = this.getValueFromEntry(entry, `${attribute}${i}`);
        }
        return list;
    }
    handleError(error) {
        if (error.error instanceof ErrorEvent) {
            console.error('An error occurred:', error.error.message);
        }
        else {
            console.error(`Backend returned code ${error.status}, body was: ${error.error}`);
        }
        return throwError('Something bad happened; please try again later.');
    }
}
GoogleSheetsDbService.ɵprov = i0.ɵɵdefineInjectable({ factory: function GoogleSheetsDbService_Factory() { return new GoogleSheetsDbService(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(API_KEY)); }, token: GoogleSheetsDbService, providedIn: "root" });
GoogleSheetsDbService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
GoogleSheetsDbService.ctorParameters = () => [
    { type: HttpClient },
    { type: String, decorators: [{ type: Inject, args: [API_KEY,] }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ29vZ2xlLXNoZWV0cy1kYi5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Ii9ob21lL3J1bm5lci93b3JrL25nLWdvb2dsZS1zaGVldHMtZGItbGlicmFyeS9uZy1nb29nbGUtc2hlZXRzLWRiLWxpYnJhcnkvcHJvamVjdHMvbmctZ29vZ2xlLXNoZWV0cy1kYi9zcmMvIiwic291cmNlcyI6WyJsaWIvZ29vZ2xlLXNoZWV0cy1kYi5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBYyxVQUFVLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDOUMsT0FBTyxFQUFFLEdBQUcsRUFBRSxVQUFVLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUVqRCxPQUFPLEVBQUUsY0FBYyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbkUsT0FBTyxFQUFFLFVBQVUsRUFBcUIsTUFBTSxzQkFBc0IsQ0FBQzs7O0FBTXJFLE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBRyxJQUFJLGNBQWMsQ0FBUyx1QkFBdUIsQ0FBQyxDQUFDO0FBSzNFLE1BQU0sT0FBTyxxQkFBcUI7SUFHaEMsWUFDVSxJQUFnQixFQUNBLE1BQWM7UUFEOUIsU0FBSSxHQUFKLElBQUksQ0FBWTtRQUNBLFdBQU0sR0FBTixNQUFNLENBQVE7UUFKeEMsd0JBQW1CLEdBQVUsQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBSy9DLENBQUM7SUFFRyxHQUFHLENBQ1IsYUFBcUIsRUFDckIsYUFBcUIsRUFDckIsaUJBQW9DO1FBRXBDLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLEVBQUUsYUFBYSxDQUFDLENBQUMsSUFBSSxDQUNwRCxHQUFHLENBQUMsQ0FBQyxJQUFnQixFQUFFLEVBQUUsQ0FDdkIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQzFCLENBQUMsS0FBYSxFQUFFLEVBQUUsQ0FDaEIsSUFB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TyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRU8sV0FBVyxDQUFDLEtBQXdCO1FBQzFDLElBQUksS0FBSyxDQUFDLEtBQUssWUFBWSxVQUFVLEVBQUU7WUFDckMsT0FBTyxDQUFDLEtBQUssQ0FBQyxvQkFBb0IsRUFBRSxLQUFLLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQzFEO2FBQU07WUFDTCxPQUFPLENBQUMsS0FBSyxDQUNYLHlCQUF5QixLQUFLLENBQUMsTUFBTSxlQUFlLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FDbEUsQ0FBQztTQUNIO1FBQ0QsT0FBTyxVQUFVLENBQUMsaURBQWlELENBQUMsQ0FBQztJQUN2RSxDQUFDOzs7O1lBekxGLFVBQVUsU0FBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQjs7O1lBVlEsVUFBVTt5Q0FnQmQsTUFBTSxTQUFDLE9BQU8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPYnNlcnZhYmxlLCB0aHJvd0Vycm9yIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBtYXAsIGNhdGNoRXJyb3IgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7IEluamVjdGlvblRva2VuLCBJbmplY3RhYmxlLCBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEh0dHBDbGllbnQsIEh0dHBFcnJvclJlc3BvbnNlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEdvb2dsZVNwcmVhZHNoZWV0c1Jlc3BvbnNlIHtcbiAgdmFsdWVzOiBzdHJpbmdbXVtdO1xufVxuXG5leHBvcnQgY29uc3QgQVBJX0tFWSA9IG5ldyBJbmplY3Rpb25Ub2tlbjxzdHJpbmc+KCdHb29nbGUgU2hlZXRzIEFQSSBrZXknKTtcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCcsXG59KVxuZXhwb3J0IGNsYXNzIEdvb2dsZVNoZWV0c0RiU2VydmljZSB7XG4gIGRlZmF1bHRBY3RpdmVWYWx1ZXM6IGFueVtdID0gWyd0cnVlJywgJzEnLCAneWVzJ107XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBodHRwOiBIdHRwQ2xpZW50LFxuICAgIEBJbmplY3QoQVBJX0tFWSkgcHVibGljIGFwaUtleTogc3RyaW5nXG4gICkge31cblxuICBwdWJsaWMgZ2V0PFQ+KFxuICAgIHNwcmVhZHNoZWV0SWQ6IHN0cmluZyxcbiAgICB3b3Jrc2hlZXROYW1lOiBzdHJpbmcsXG4gICAgYXR0cmlidXRlc01hcHBpbmc6IG9iamVjdCB8IHN0cmluZ1tdXG4gICk6IE9ic2VydmFibGU8VFtdPiB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0Um93cyhzcHJlYWRzaGVldElkLCB3b3Jrc2hlZXROYW1lKS5waXBlKFxuICAgICAgbWFwKChyb3dzOiBzdHJpbmdbXVtdKSA9PlxuICAgICAgICB0aGlzLnJvd3NUb0VudHJpZXMocm93cykubWFwKFxuICAgICAgICAgIChlbnRyeTogb2JqZWN0KSA9PlxuICAgICAgICAgICAgdGhpcy5nZXRPYmplY3RGcm9tRW50cnkoZW50cnksIGF0dHJpYnV0ZXNNYXBwaW5nKSBhcyBUXG4gICAgICAgIClcbiAgICAgIClcbiAgICApO1xuICB9XG5cbiAgcHVibGljIGdldEFjdGl2ZTxUPihcbiAgICBzcHJlYWRzaGVldElkOiBzdHJpbmcsXG4gICAgd29ya3NoZWV0TmFtZTogc3RyaW5nLFxuICAgIGF0dHJpYnV0ZXNNYXBwaW5nOiBvYmplY3QgfCBzdHJpbmdbXSxcbiAgICBpc0FjdGl2ZUNvbHVtbk5hbWU6IHN0cmluZyA9ICdpc19hY3RpdmUnLFxuICAgIGFjdGl2ZVZhbHVlczogc3RyaW5nW10gfCBzdHJpbmcgPSBudWxsXG4gICk6IE9ic2VydmFibGU8VFtdPiB7XG4gICAgaWYgKGFjdGl2ZVZhbHVlcyA9PT0gbnVsbCkge1xuICAgICAgYWN0aXZlVmFsdWVzID0gdGhpcy5kZWZhdWx0QWN0aXZlVmFsdWVzO1xuICAgIH0gZWxzZSBpZiAoIUFycmF5LmlzQXJyYXkoYWN0aXZlVmFsdWVzKSkge1xuICAgICAgYWN0aXZlVmFsdWVzID0gW2FjdGl2ZVZhbHVlc107XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmdldFJvd3Moc3ByZWFkc2hlZXRJZCwgd29ya3NoZWV0TmFtZSkucGlwZShcbiAgICAgIG1hcCgocm93czogc3RyaW5nW11bXSkgPT5cbiAgICAgICAgdGhpcy5yb3dzVG9FbnRyaWVzKHJvd3MpXG4gICAgICAgICAgLmZpbHRlcigob2JqOiBvYmplY3QpID0+XG4gICAgICAgICAgICBhY3RpdmVWYWx1ZXMuaW5jbHVkZXMob2JqW2lzQWN0aXZlQ29sdW1uTmFtZV0udG9Mb3dlckNhc2UoKSlcbiAgICAgICAgICApXG4gICAgICAgICAgLm1hcChcbiAgICAgICAgICAgIChlbnRyeTogb2JqZWN0KSA9PlxuICAgICAgICAgICAgICB0aGlzLmdldE9iamVjdEZyb21FbnRyeShlbnRyeSwgYXR0cmlidXRlc01hcHBpbmcpIGFzIFRcbiAgICAgICAgICApXG4gICAgICApXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0U3ByZWFkc2hlZXRVcmwoXG4gICAgc3ByZWFkc2hlZXRJZDogc3RyaW5nLFxuICAgIHdvcmtzaGVldE5hbWU6IHN0cmluZ1xuICApOiBzdHJpbmcge1xuICAgIHJldHVybiAoXG4gICAgICAnaHR0cHM6Ly9zaGVldHMuZ29vZ2xlYXBpcy5jb20vdjQvc3ByZWFkc2hlZXRzLycgK1xuICAgICAgc3ByZWFkc2hlZXRJZCArXG4gICAgICAnL3ZhbHVlcy8nICtcbiAgICAgIGVuY29kZVVSSSh3b3Jrc2hlZXROYW1lKSArXG4gICAgICAnP2tleT0nICtcbiAgICAgIHRoaXMuYXBpS2V5XG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0Um93cyhcbiAgICBzcHJlYWRzaGVldElkOiBzdHJpbmcsXG4gICAgd29ya3NoZWV0TmFtZTogc3RyaW5nXG4gICk6IE9ic2VydmFibGU8c3RyaW5nW11bXT4ge1xuICAgIGNvbnN0IHNwcmVhZHNoZWV0VXJsID0gdGhpcy5nZXRTcHJlYWRzaGVldFVybChzcHJlYWRzaGVldElkLCB3b3Jrc2hlZXROYW1lKTtcblxuICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0PEdvb2dsZVNwcmVhZHNoZWV0c1Jlc3BvbnNlPihzcHJlYWRzaGVldFVybCkucGlwZShcbiAgICAgIG1hcCgoanNvblJlcykgPT4ganNvblJlcy52YWx1ZXMpLFxuICAgICAgY2F0Y2hFcnJvcih0aGlzLmhhbmRsZUVycm9yKVxuICAgICk7XG4gIH1cblxuICBwdWJsaWMgcm93c1RvRW50cmllcyhyb3dzOiBzdHJpbmdbXVtdKTogb2JqZWN0W10ge1xuICAgIGNvbnN0IGNvbHVtbnM6IEFycmF5PHN0cmluZz4gPSByb3dzWzBdLm1hcCh0aGlzLmNsZWFuQ29sdW1uTmFtZSk7XG4gICAgcmV0dXJuIHJvd3Muc2xpY2UoMSkubWFwKChyb3c6IEFycmF5PHN0cmluZz4pID0+XG4gICAgICBjb2x1bW5zLnJlZHVjZSgoZW50cnk6IG9iamVjdCwgY29sdW1uTmFtZTogc3RyaW5nLCBpZHg6IG51bWJlcikgPT4ge1xuICAgICAgICBlbnRyeVtjb2x1bW5OYW1lXSA9IHJvdy5sZW5ndGggPiBpZHggPyByb3dbaWR4XSA6ICcnO1xuICAgICAgICByZXR1cm4gZW50cnk7XG4gICAgICB9LCB7fSlcbiAgICApO1xuICB9XG5cbiAgcHVibGljIGNsZWFuQ29sdW1uTmFtZShjb2x1bW5OYW1lOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiBjb2x1bW5OYW1lLnRyaW0oKTtcbiAgfVxuXG4gIHByaXZhdGUgYXJyYXlUb09iamVjdChhcnJheTogc3RyaW5nW10pOiBvYmplY3Qge1xuICAgIHJldHVybiBhcnJheS5yZWR1Y2UoKGFjYywgY3VyKSA9PiB7XG4gICAgICBhY2NbY3VyXSA9IGN1cjtcbiAgICAgIHJldHVybiBhY2M7XG4gICAgfSwge30pO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRPYmplY3RGcm9tRW50cnkoXG4gICAgZW50cnk6IG9iamVjdCxcbiAgICBhdHRyaWJ1dGVzTWFwcGluZzogb2JqZWN0IHwgc3RyaW5nW11cbiAgKTogdW5rbm93biB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoYXR0cmlidXRlc01hcHBpbmcpKSB7XG4gICAgICBhdHRyaWJ1dGVzTWFwcGluZyA9IHRoaXMuYXJyYXlUb09iamVjdChhdHRyaWJ1dGVzTWFwcGluZyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuZ2V0T2JqZWN0RnJvbUVudHJ5T2JqZWN0KGVudHJ5LCBhdHRyaWJ1dGVzTWFwcGluZyk7XG4gIH1cblxuICBwcml2YXRlIGdldE9iamVjdEZyb21FbnRyeU9iamVjdChcbiAgICBlbnRyeTogb2JqZWN0LFxuICAgIGF0dHJpYnV0ZXNNYXBwaW5nOiBvYmplY3QsXG4gICAgY29sdW1uTmFtZVByZWZpeDogc3RyaW5nID0gJydcbiAgKTogb2JqZWN0IHtcbiAgICBjb25zdCBvYmo6IG9iamVjdCA9IHt9O1xuICAgIGZvciAoY29uc3QgYXR0ciBpbiBPYmplY3QoYXR0cmlidXRlc01hcHBpbmcpKSB7XG4gICAgICBpZiAoXG4gICAgICAgIGF0dHJpYnV0ZXNNYXBwaW5nLmhhc093blByb3BlcnR5KGF0dHIpICYmXG4gICAgICAgICFbJ19wcmVmaXgnLCAnX2xpc3RGaWVsZCddLmluY2x1ZGVzKGF0dHIpXG4gICAgICApIHtcbiAgICAgICAgaWYgKHR5cGVvZiBhdHRyaWJ1dGVzTWFwcGluZ1thdHRyXSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBvYmpbYXR0cl0gPSB0aGlzLmdldFZhbHVlRnJvbUVudHJ5KFxuICAgICAgICAgICAgZW50cnksXG4gICAgICAgICAgICBjb2x1bW5OYW1lUHJlZml4ICsgYXR0cmlidXRlc01hcHBpbmdbYXR0cl1cbiAgICAgICAgICApO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBhdHRyaWJ1dGVzTWFwcGluZ1thdHRyXSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICBsZXQgY29sdW1uTmFtZSA9ICcnO1xuICAgICAgICAgIGlmIChhdHRyaWJ1dGVzTWFwcGluZ1thdHRyXS5oYXNPd25Qcm9wZXJ0eSgnX3ByZWZpeCcpKSB7XG4gICAgICAgICAgICBjb2x1bW5OYW1lID0gYXR0cmlidXRlc01hcHBpbmdbYXR0cl0uX3ByZWZpeDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoYXR0cmlidXRlc01hcHBpbmdbYXR0cl0uX2xpc3RGaWVsZCkge1xuICAgICAgICAgICAgb2JqW2F0dHJdID0gdGhpcy5nZXRMaXN0RnJvbUVudHJ5KFxuICAgICAgICAgICAgICBlbnRyeSxcbiAgICAgICAgICAgICAgY29sdW1uTmFtZVByZWZpeCArIGNvbHVtbk5hbWVcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG9ialthdHRyXSA9IHRoaXMuZ2V0T2JqZWN0RnJvbUVudHJ5T2JqZWN0KFxuICAgICAgICAgICAgICBlbnRyeSxcbiAgICAgICAgICAgICAgYXR0cmlidXRlc01hcHBpbmdbYXR0cl0sXG4gICAgICAgICAgICAgIGNvbHVtbk5hbWVQcmVmaXggKyBjb2x1bW5OYW1lXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhgVW5rbm93biB0eXBlIGZvciAke2F0dHJ9YCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gb2JqO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRWYWx1ZUZyb21FbnRyeShlbnRyeTogb2JqZWN0LCBhdHRyaWJ1dGU6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgYXR0cmlidXRlID0gdGhpcy5jbGVhbkNvbHVtbk5hbWUoYXR0cmlidXRlKTtcbiAgICBpZiAoZW50cnkuaGFzT3duUHJvcGVydHkoYXR0cmlidXRlKSkge1xuICAgICAgcmV0dXJuIGVudHJ5W2F0dHJpYnV0ZV07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgZ2V0TGlzdEZyb21FbnRyeShlbnRyeTogb2JqZWN0LCBhdHRyaWJ1dGU6IHN0cmluZyk6IHN0cmluZ1tdIHtcbiAgICBjb25zdCBsaXN0OiBzdHJpbmdbXSA9IFtdO1xuXG4gICAgbGV0IGkgPSAxO1xuICAgIGxldCBjdXJFbGVtZW50OiBzdHJpbmcgPSB0aGlzLmdldFZhbHVlRnJvbUVudHJ5KGVudHJ5LCBgJHthdHRyaWJ1dGV9JHtpfWApO1xuICAgIHdoaWxlIChjdXJFbGVtZW50KSB7XG4gICAgICBsaXN0LnB1c2goY3VyRWxlbWVudCk7XG4gICAgICBpKys7XG4gICAgICBjdXJFbGVtZW50ID0gdGhpcy5nZXRWYWx1ZUZyb21FbnRyeShlbnRyeSwgYCR7YXR0cmlidXRlfSR7aX1gKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbGlzdDtcbiAgfVxuXG4gIHByaXZhdGUgaGFuZGxlRXJyb3IoZXJyb3I6IEh0dHBFcnJvclJlc3BvbnNlKTogT2JzZXJ2YWJsZTxuZXZlcj4ge1xuICAgIGlmIChlcnJvci5lcnJvciBpbnN0YW5jZW9mIEVycm9yRXZlbnQpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0FuIGVycm9yIG9jY3VycmVkOicsIGVycm9yLmVycm9yLm1lc3NhZ2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICBgQmFja2VuZCByZXR1cm5lZCBjb2RlICR7ZXJyb3Iuc3RhdHVzfSwgYm9keSB3YXM6ICR7ZXJyb3IuZXJyb3J9YFxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHRocm93RXJyb3IoJ1NvbWV0aGluZyBiYWQgaGFwcGVuZWQ7IHBsZWFzZSB0cnkgYWdhaW4gbGF0ZXIuJyk7XG4gIH1cbn1cbiJdfQ==